jest.unmock("../index.js");

describe("vue-test-utils", () => {

	describe('basic usage', () => {

		let Vue;
		beforeEach(() => {
			Vue = require("vue");
			Vue.use(require("../index.js"));
			Vue.config.debug = true;
			Vue.config.async = false;
		})

		it('should find the child element', () => {
			document.body.innerHTML = `
			<div id="app">
				<div class="child" v-text="message"></div>
			</div>
		`;
			const vm = new Vue({
				el: "#app",
				data: {
					message: "Hello, Vue.js"
				}
			});
			expect(vm.$('.child').textContent).toBe('Hello, Vue.js');
		});

		it('should find all child elements', () => {
			document.body.innerHTML = `
			<div id="app">
				<ul>
					<li v-for="name in names" v-text="name"></li>
				</ul>
			</div>
		`;
			const vm = new Vue({
				el: "#app",
				data: {
					names: [
						"Zhang", "Zhao", "Liu", "Niu"
					]
				}
			});
			expect(vm.$$('li').length).toBe(4);
		});

		it('should trigger event', () => {
			document.body.innerHTML = `
			<div id="app">
				<button @click="click"></button>
			</div>
		`;
			let mockClick = jest.fn();
			const vm = new Vue({
				el: "#app",
				methods: {
					click: mockClick
				}
			});
			vm.$fire('button', 'click');
			expect(mockClick).toBeCalled();
		});

	});

	
	describe('plugin options', () => {

		const options = {
				el: "#app",
				data: {
					message: "Hello, Vue.js",
					names: ["name1", "name2", "name3"]
				},
				methods: {
					click: function() {}
				}
		};
		
		beforeEach(() => {
			document.body.innerHTML = `
				<div id="app">
					<div class="child" v-text="message"></div>
					<ul>
						<li v-for="name in names" v-text="name"></li>
					</ul>
					<button @click="click"></button>
				</div>
			`;
		})
		
		it('should change dollar sign', () => {
			let Vue = require("vue");
			Vue.use(require("../index.js"), {
				'$': 'dollar'
			});
			Vue.config.debug = true;
			Vue.config.async = false;

			let mockClick = jest.fn();			
			const vm = new Vue(options);

			expect(vm.$).toBe(undefined);
			expect(vm.dollar('.child').textContent).toBe('Hello, Vue.js');
		});

		it('should change double dollar sign', () => {
			let Vue = require("vue");
			Vue.use(require("../index.js"), {
				'$$': 'ddollar'
			});
			Vue.config.debug = true;
			Vue.config.async = false;

			let mockClick = jest.fn();			
			const vm = new Vue(options);

			expect(vm.$$).toBe(undefined);
			expect(vm.ddollar('li').length).toBe(3);
		});

		it('should change $fire', () => {
			let Vue = require("vue");
			Vue.use(require("../index.js"), {
				'$fire': '$trigger'
			});
			Vue.config.debug = true;
			Vue.config.async = false;

			let mockClick = jest.fn();			
			const vm = new Vue(Object.assign({}, options, {
				methods: {
					click: mockClick
				}
			}));

			expect(vm.$fire).toBe(undefined);
			vm.$trigger('button', 'click');
			expect(mockClick).toBeCalled();
		});

	});

	describe('warn if method exists', () => {
		
		function warnMessage(name) {
      return '"' + name + '" already exists in instance methods, please change it through plugin options.';
    }
		
		it('should warn if dollar sign exists', () => {
			var old = console.warn;
			console.warn = jest.fn();
			let Vue = require("vue");
			Vue.prototype.$ = 1;
			Vue.use(require("../index.js"));
			expect(console.warn).toBeCalledWith(warnMessage('$'));
			console.warn = old;
		});

		it('should warn if double dollar sign exists', () => {
			var old = console.warn;
			console.warn = jest.fn();
			let Vue = require("vue");
			Vue.prototype.$$ = 1;
			Vue.use(require("../index.js"));
			expect(console.warn).toBeCalledWith(warnMessage('$$'));
			console.warn = old;
		});

		it('should warn if $fire exists', () => {
			var old = console.warn;
			console.warn = jest.fn();
			let Vue = require("vue");
			Vue.prototype.$fire = 1;
			Vue.use(require("../index.js"));
			expect(console.warn).toBeCalledWith(warnMessage('$fire'));
			console.warn = old;
		});

	});

});
